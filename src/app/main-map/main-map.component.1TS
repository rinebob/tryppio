
import { Component, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Input, Output } from '@angular/core';
import {Subscription} from 'rxjs';
// tslint:disable-next-line:max-line-length
import {

  StreetViewControlOptions,
  ZoomControlOptions,
  MapTypeStyle,
  LatLngBoundsLiteral,
  LatLngBounds,
  ScaleControlOptions,
  MapTypeControlOptions,
  PanControlOptions,
  RotateControlOptions,
  FullscreenControlOptions,
  LatLng,
  LatLngLiteral,
  MapTypeId

   } from '@agm/core/services/google-maps-types';


import {MouseEvent} from '@agm/core/map-types';
import {GoogleMapsAPIWrapper} from '@agm/core/services/google-maps-api-wrapper';
import {InfoWindowManager} from '@agm/core/services/managers/info-window-manager';
import {MarkerManager} from '@agm/core/services/managers/marker-manager';
import {FitBoundsService} from '@agm/core/services/fit-bounds';

// import {CircleManager} from '@agm/core/services/managers/circle-manager';
// import {RectangleManager} from '@agm/core/services/managers/rectangle-manager';
// import {PolygonManager} from '@agm/core/services/managers/polygon-manager';
// import {PolylineManager} from '@agm/core/services/managers/polyline-manager';
// import {KmlLayerManager} from '@agm/core/services/managers/kml-layer-manager';
// import {DataLayerManager} from '@agm/core/services/managers/data-layer-manager';

declare var google: any;



@Component({
  selector: 'app-main-map',
  providers: [
    GoogleMapsAPIWrapper, MarkerManager, InfoWindowManager, FitBoundsService,
    // CircleManager, RectangleManager, PolylineManager, PolygonManager, KmlLayerManager, DataLayerManager
  ],
  //  host: {
  //   // todo: deprecated - we will remove it with the next version
  //   '[class.sebm-google-map-container]': 'true'
  // },
  templateUrl: './main-map.component.html',
  styleUrls: ['./main-map.component.css']
})
export class MainMapComponent implements OnInit, OnChanges, OnDestroy {

   /**
   * Map option attributes that can change over time
   */
  private static _mapOptionsAttributes: string[] = [
    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',
    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',
    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',
    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',
    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',
    'mapTypeId', 'clickableIcons', 'gestureHandling'
  ];

  title = 'Tryypio Main Map';
  locationChosen = false;

  // thailand - krabi beach
  @Input() lat = 8.106433;
  @Input() lng = 98.700729;



  @Input() zoom = 8;
  @Input() minZoom: number;
  @Input() maxZoom: number;
  @Input('mapDraggable') draggable: boolean = true;
  @Input() disableDoubleClickZoom: boolean = false;
  @Input() disableDefaultUI: boolean = false;
  @Input() scrollwheel: boolean = true;
  @Input() backgroundColor: string;
  @Input() draggableCursor: string;
  @Input() draggingCursor: string;
  @Input() keyboardShortcuts: boolean = true;
  @Input() zoomControl: boolean = true;
  @Input() zoomControlOptions: ZoomControlOptions;
  @Input() styles: MapTypeStyle[] = [];
  @Input() usePanning: boolean = true;
  @Input() streetViewControl: boolean = true;
  @Input() streetViewControlOptions: StreetViewControlOptions;
  @Input() fitBounds: LatLngBoundsLiteral|LatLngBounds|boolean = false;
  @Input() scaleControl: boolean = true;
  @Input() scaleControlOptions: ScaleControlOptions;

  @Input() mapTypeControl = true;
  @Input() mapTypeControlOptions: MapTypeControlOptions;
  @Input() panControl = true;
  @Input() panControlOptions: PanControlOptions;

  @Input() rotateControl: boolean = true;
  @Input() rotateControlOptions: RotateControlOptions;
  @Input() fullscreenControl: boolean  = true;
  @Input() fullscreenControlOptions: FullscreenControlOptions;
  @Input() mapTypeId: 'roadmap'|'hybrid'|'satellite'|'terrain'|string = 'terrain';
  // mapTypeId = 'terrain';
  @Input() clickableIcons: boolean = true;
   @Input() gestureHandling: 'cooperative'|'greedy'|'none'|'auto' = 'auto';

  private _observableSubscriptions: Subscription[] = [];
  private _fitBoundsSubscription: Subscription;

  // emitted when the user clicks on the map (but not when they click on a marker or infoWindow).
  @Output() mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();

  // emitted when the user right-clicks on the map (but not when they click on a marker or infoWindow).
  @Output() mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();

  // emitted when the user double-clicks on the map (but not when they click on a marker or infoWindow).
  @Output() mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();

  /**
   * This event emitter is fired when the map center changes.
   */
  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();

  /**
   * This event is fired when the viewport bounds have changed.
   */
  @Output() boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();

  /**
   * This event is fired when the mapTypeId property changes.
   */
  @Output() mapTypeIdChange: EventEmitter<MapTypeId> = new EventEmitter<MapTypeId>();

  /**
   * This event is fired when the map becomes idle after panning or zooming.
   */
  @Output() idle: EventEmitter<void> = new EventEmitter<void>();

  /**
   * This event is fired when the zoom level has changed.
   */
  @Output() zoomChange: EventEmitter<number> = new EventEmitter<number>();

  /**
   * This event is fired when the google map is fully initialized.
   * You get the google.maps.Map instance as a result of this EventEmitter.
   */
  @Output() mapReady: EventEmitter<any> = new EventEmitter<any>();

  location: Object;


  constructor(private _elem: ElementRef, private _mapsWrapper: GoogleMapsAPIWrapper, protected _fitBoundsService: FitBoundsService) {}

  ngOnInit() {
    const container = this._elem.nativeElement.querySelector('.app-main-map-container-inner');
    // this._initMapInstance(container);
  }

  private _initMapInstance(el: HTMLElement) {
    this._mapsWrapper.createMap(el, {
      center: {lat: this.lat || 0, lng: this.lng || 0},
      zoom: this.zoom,
      minZoom: this.minZoom,
      maxZoom: this.maxZoom,
      disableDefaultUI: this.disableDefaultUI,
      disableDoubleClickZoom: this.disableDoubleClickZoom,
      scrollwheel: this.scrollwheel,
      backgroundColor: this.backgroundColor,
      draggable: this.draggable,
      draggableCursor: this.draggableCursor,
      draggingCursor: this.draggingCursor,
      keyboardShortcuts: this.keyboardShortcuts,
      styles: this.styles,
      zoomControl: this.zoomControl,
      zoomControlOptions: this.zoomControlOptions,
      streetViewControl: this.streetViewControl,
      streetViewControlOptions: this.streetViewControlOptions,
      scaleControl: this.scaleControl,
      scaleControlOptions: this.scaleControlOptions,
      mapTypeControl: this.mapTypeControl,
      mapTypeControlOptions: this.mapTypeControlOptions,
      panControl: this.panControl,
      panControlOptions: this.panControlOptions,
      rotateControl: this.rotateControl,
      rotateControlOptions: this.rotateControlOptions,
      fullscreenControl: this.fullscreenControl,
      fullscreenControlOptions: this.fullscreenControlOptions,
      mapTypeId: this.mapTypeId,
      clickableIcons: this.clickableIcons,
      gestureHandling: this.gestureHandling
    })
      .then(() => this._mapsWrapper.getNativeMap())
      .then(map => {
        this.mapReady.emit(map);
        console.log('100 m-m.c.ts _initMapInstance.  map = ', map );
      });

    // register event listeners
    this._handleMapCenterChange();
    this._handleMapZoomChange();
    this._handleMapMouseEvents();
    this._handleBoundsChange();
    this._handleMapTypeIdChange();
    this._handleIdleEvent();
  }

  onChoseLocation(event) {
    console.log(event);
    this.lat = event.coords.lat;
    this.lng = event.coords.lng;

    // allows display of marker when true
    this.locationChosen = true;
  }

  ngOnDestroy() {
    console.log('');
     // unsubscribe all registered observable subscriptions
    this._observableSubscriptions.forEach((s) => s.unsubscribe());

    // remove all listeners from the map instance
    this._mapsWrapper.clearInstanceListeners();
    if (this._fitBoundsSubscription) {
      this._fitBoundsSubscription.unsubscribe();
    }
  }

    /* @internal */
  ngOnChanges(changes: SimpleChanges) {
    this._updateMapOptionsChanges(changes);
    this._updatePosition(changes);
  }

  private _updateMapOptionsChanges(changes: SimpleChanges) {
    let options: {[propName: string]: any} = {};
    let optionKeys =
        Object.keys(changes).filter(k => MainMapComponent._mapOptionsAttributes.indexOf(k) !== -1);
    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });
    this._mapsWrapper.setMapOptions(options);
  }

  /**
   * Triggers a resize event on the google map instance.
   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.
   * Returns a promise that gets resolved after the event was triggered.
   */
  triggerResize(recenter: boolean = true): Promise<void> {
    // Note: When we would trigger the resize event and show the map in the same turn (which is a
    // common case for triggering a resize event), then the resize event would not
    // work (to show the map), so we trigger the event in a timeout.
    return new Promise<void>((resolve) => {
      setTimeout(() => {
        return this._mapsWrapper.triggerMapEvent('resize').then(() => {
          if (recenter) {
            this.fitBounds != null ? this._fitBounds() : this._setCenter();
          }
          resolve();
        });
      });
    });
  }

  private _updatePosition(changes: SimpleChanges) {
    if (changes['latitude'] == null && changes['longitude'] == null &&
        !changes['fitBounds']) {
      // no position update needed
      return;
    }

    // we prefer fitBounds in changes
    if ('fitBounds' in changes) {
      this._fitBounds();
      return;
    }

    if (typeof this.lat !== 'number' || typeof this.lng !== 'number') {
      return;
    }
    this._setCenter();
  }

  private _setCenter() {
    let newCenter = {
      lat: this.lat,
      lng: this.lng,
    };
    if (this.usePanning) {
      this._mapsWrapper.panTo(newCenter);
    } else {
      this._mapsWrapper.setCenter(newCenter);
    }
  }

  private _fitBounds() {
    switch (this.fitBounds) {
      case true:
        this._subscribeToFitBoundsUpdates();
      break;
      case false:
        if (this._fitBoundsSubscription) {
          this._fitBoundsSubscription.unsubscribe();
        }
       break;
       default:
       this._updateBounds(this.fitBounds);
    }
  }

  private _subscribeToFitBoundsUpdates() {
    this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => this._updateBounds(b));
  }

  protected _updateBounds(bounds: LatLngBounds|LatLngBoundsLiteral) {
    if (this._isLatLngBoundsLiteral(bounds) && google && google.maps) {
      const newBounds = <LatLngBounds>google.maps.LatLngBounds();
      newBounds.union(bounds);
      bounds = newBounds;
    }
    if (this.usePanning) {
      this._mapsWrapper.panToBounds(bounds);
      return;
    }
    this._mapsWrapper.fitBounds(bounds);
  }

  private _isLatLngBoundsLiteral(bounds: LatLngBounds|LatLngBoundsLiteral): bounds is LatLngBoundsLiteral {
    return bounds != null && (<any>bounds).extend === undefined;
  }

  private _handleMapCenterChange() {
    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {
      this._mapsWrapper.getCenter().then((center: LatLng) => {
        this.lat = center.lat();
        this.lng = center.lng();
        this.centerChange.emit(<LatLngLiteral>{lat: this.lat, lng: this.lng});
      });
    });
    this._observableSubscriptions.push(s);
  }

  private _handleBoundsChange() {
    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {
      this._mapsWrapper.getBounds().then(
          (bounds: LatLngBounds) => { this.boundsChange.emit(bounds); });
    });
    this._observableSubscriptions.push(s);
  }

  private _handleMapTypeIdChange() {
    const s = this._mapsWrapper.subscribeToMapEvent<void>('maptypeid_changed').subscribe(() => {
      this._mapsWrapper.getMapTypeId().then(
          (mapTypeId: MapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });
    });
    this._observableSubscriptions.push(s);
  }

  private _handleMapZoomChange() {
    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {
      this._mapsWrapper.getZoom().then((z: number) => {
        this.zoom = z;
        this.zoomChange.emit(z);
      });
    });
    this._observableSubscriptions.push(s);
  }

  private _handleIdleEvent() {
    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(
        () => { this.idle.emit(void 0); });
    this._observableSubscriptions.push(s);
  }


  private _handleMapMouseEvents() {
    interface Emitter {
      emit(value: any): void;
    }
    // tslint:disable-next-line:interface-over-type-literal
    type Event = {name: string, emitter: Emitter};

    const events: Event[] = [
      {name: 'click', emitter: this.mapClick},
      {name: 'rightclick', emitter: this.mapRightClick},
      {name: 'dblclick', emitter: this.mapDblClick},
    ];

    events.forEach((e: Event) => {
      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(
          (event: {latLng: LatLng}) => {
            const value = <MouseEvent>{coords: {lat: event.latLng.lat(), lng: event.latLng.lng()}};
            e.emitter.emit(value);
          });
      this._observableSubscriptions.push(s);
    });
  }

}
